<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>mpvue 初识</title>
      <link href="/2018/06/04/mpvue/"/>
      <url>/2018/06/04/mpvue/</url>
      <content type="html"><![CDATA[<h1 id="mpvue初识之安装和使用"><a href="#mpvue初识之安装和使用" class="headerlink" title="mpvue初识之安装和使用"></a>mpvue初识之安装和使用</h1><h2 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h2><h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global vue-cli | npm install -g vue-cli</span><br></pre></td></tr></table></figure><h3 id="初始化一个项目"><a href="#初始化一个项目" class="headerlink" title="初始化一个项目"></a>初始化一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init mpvue/mpvue-quickstart projName</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ vue init mpvue/mpvue-quickstart projName</span><br><span class="line"></span><br><span class="line">? Project name projName</span><br><span class="line">? wxmp appid wxfc097****b431e</span><br><span class="line">? Project description A Mpvue project</span><br><span class="line">? Author tanglin &lt;2196****5@qq.com&gt;</span><br><span class="line">? Vue build runtime</span><br><span class="line">? Use Vuex? No</span><br><span class="line">? Use ESLint to lint your code? No</span><br><span class="line">? 小程序测试，敬请关注最新微信开发者工具的“测试报告”功能</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated <span class="string">"mpvue-demo"</span>.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line"></span><br><span class="line">     <span class="built_in">cd</span> mpvue-demo</span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br><span class="line"></span><br><span class="line">   Documentation can be found at http://mpvue.com</span><br></pre></td></tr></table></figure></p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>scripts 可运行脚本, 可以发出的命令<br>dependencies (上线、整个项目)依赖<br>devDependencies (运行、开发时)依赖<br>babel<br>px2rpx<br>webpack</p><h3 id="npm-run-输出当前可运行脚本"><a href="#npm-run-输出当前可运行脚本" class="headerlink" title="npm run 输出当前可运行脚本"></a>npm run 输出当前可运行脚本</h3><p><code>npm run dev</code><br>运行 dev 脚本<br>“dev”: “node build/dev-server.js”</p><p>打开开发者<br>main.js 是入口文件</p><h2 id="几个简单的-mpvue-操作"><a href="#几个简单的-mpvue-操作" class="headerlink" title="几个简单的 mpvue 操作"></a>几个简单的 mpvue 操作</h2><ul><li><p><code>v-modules</code> 数据绑定  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"myTodo"</span> <span class="attr">placeholder</span>=<span class="string">"点我"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@click 事件绑定   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addTodo"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-for 循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-key</span>=<span class="string">"i"</span> <span class="attr">v-for</span>=<span class="string">"(todo, i) in todos"</span> <span class="attr">:class</span>=<span class="string">"&#123;'done': todo.done&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle(i)"</span>&gt;</span>&#123;&#123;todo.text&#125;&#125; ？ &#123;&#123;todo.done&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-for</code> 中是一个类似 <code>for..in</code> 的循环结构，指定<code>( key, index )</code><br><code>:</code> 动态绑定属性，标签或组件的属性是跟data相关<br><code>:class=&quot;{&#39;done&#39;: todo.done}&quot;</code> 表示后面为 <code>true</code> 则赋给前面的类名<br><code>@click()</code> 函数可以传参<br>一个 {} 表示js 运行区域</p></li><li>computed: {} 计算属性<br>Vue里面，就像所有的方法都在methods中一样，所有的计算属性都写在 vue 实例的 computed 属性中，这个计算属性就是一个函数，返回值为最后属性的值。<br>定义完成之后，我们就可以像用普通属性一样去用计算属性。<br>计算属性的方法可以包含很多繁重的逻辑，最终返回我们需要的值</li></ul>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> mpvue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序组件化开发框架 WePY 初体验</title>
      <link href="/2018/06/04/wepy/"/>
      <url>/2018/06/04/wepy/</url>
      <content type="html"><![CDATA[<h1 id="微信小程序组件化开发框架-WePY-初体验"><a href="#微信小程序组件化开发框架-WePY-初体验" class="headerlink" title="微信小程序组件化开发框架 WePY 初体验"></a>微信小程序组件化开发框架 WePY 初体验</h1><blockquote><p>写在前面：组件化开发的组价(<code>Component</code>)，说的不是小程序中的 <code>scroll-view</code> 这种页面组件，而是指一些设计为通用性的，用来构建较大型应用程序的软件，如 UI 组件。核心意义在于复用。WePY 就是基于 Vue、react 在 MVVM 基础上建立起来的组件开发框架。</p></blockquote><h2 id="WePY项目的创建"><a href="#WePY项目的创建" class="headerlink" title="WePY项目的创建"></a>WePY项目的创建</h2><h3 id="全局安装或更新WePY命令行工具"><a href="#全局安装或更新WePY命令行工具" class="headerlink" title="全局安装或更新WePY命令行工具"></a>全局安装或更新WePY命令行工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wepy-cli -g</span><br></pre></td></tr></table></figure><h3 id="初始化一个项目"><a href="#初始化一个项目" class="headerlink" title="初始化一个项目"></a>初始化一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wepy init standard myproject</span><br></pre></td></tr></table></figure><blockquote><p>输出，后面几个选择 <code>no</code> 暂时用不上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? Project name 项目名称</span><br><span class="line">? AppId wxfc0******1e 你的AppId</span><br><span class="line">? Project description A WePY 项目名称</span><br><span class="line">? Author ta***<span class="keyword">in</span> 2196****35@qq.com </span><br><span class="line">? Use ESLint to lint your code? (y/n) No</span><br><span class="line">? Use Redux <span class="keyword">in</span> your project? (y/n) No</span><br><span class="line">? Use web transform feature <span class="keyword">in</span> your project? (/n) No</span><br><span class="line"></span><br><span class="line">   wepy-cli · Generated <span class="string">"try-wepy"</span>.</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p><strong>首先要切换至项目目录</strong><br><code>cd myproject</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>推荐 <code>yarn</code></p><blockquote><p>根据 <code>package.json</code> 安装依赖文件，将会在 <code>node_modules</code> 文件中添加依赖包</p></blockquote><h3 id="开启实时编译"><a href="#开启实时编译" class="headerlink" title="开启实时编译"></a>开启实时编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wepy build --watch</span><br></pre></td></tr></table></figure><blockquote><p>这会像 <code>stylus</code> 一样开始编译并监听文件改变，此时会生成 <code>dist</code> 目录（小程序目录，微信开发者工具从此处打开小程序），我们的开发目录在 <code>src/</code> 下</p></blockquote><h2 id="WePY项目的目录结构"><a href="#WePY项目的目录结构" class="headerlink" title="WePY项目的目录结构"></a>WePY项目的目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── dist                   小程序运行代码目录（该目录由WePY的build指令自动编译生成，请不要直接修改该目录下的文件）</span><br><span class="line">├── node_modules           </span><br><span class="line">├── src                    代码编写的目录（该目录为使用WePY后的开发目录）</span><br><span class="line">|   ├── components         WePY组件目录（组件不属于完整页面，仅供完整页面或其他组件引用）</span><br><span class="line">|   |   ├── com_a.wpy      可复用的WePY组件a</span><br><span class="line">|   |   └── com_b.wpy      可复用的WePY组件b</span><br><span class="line">|   ├── pages              WePY页面目录（属于完整页面）</span><br><span class="line">|   |   ├── index.wpy      index页面（经build后，会在dist目录下的pages目录生成index.js、index.json、index.wxml和index.wxss文件）</span><br><span class="line">|   |   └── other.wpy      other页面（经build后，会在dist目录下的pages目录生成other.js、other.json、other.wxml和other.wxss文件）</span><br><span class="line">|   └── app.wpy            小程序配置项（全局数据、样式、声明钩子等；经build后，会在dist目录下生成app.js、app.json和app.wxss文件）</span><br><span class="line">└── package.json           项目的package配置</span><br></pre></td></tr></table></figure><h2 id="添加项目"><a href="#添加项目" class="headerlink" title="添加项目"></a>添加项目</h2><ul><li><p>app.wpy<br>  <code>app.wpy</code> 文件其实就是小程序中的 <code>app.json</code> 文件，我们在这个文件中注册 App 的页面，参照这一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default class extends wepy.app &#123;</span><br><span class="line">    config = &#123;</span><br><span class="line">        pages: [</span><br><span class="line">            &apos;pages/home&apos;,</span><br><span class="line">            &apos;pages/classify&apos;,</span><br><span class="line">            &apos;pages/shop_cart&apos;,</span><br><span class="line">            &apos;pages/info&apos;,</span><br><span class="line">            &apos;pages/index&apos;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure></li><li><p>新建文件<br>在 <code>src/pages/</code> 目录下新建注册的页面，后缀名为 <code>.wpy</code></p></li><li><p>基本格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;&lt;/style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;view&gt;&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // wepy 在本地的 node_modules/ 下（其实也在全局，如果全局安装了 wepy）</span><br><span class="line">    import wepy from &apos;wepy&apos;</span><br><span class="line"></span><br><span class="line">    // 单页面组件</span><br><span class="line">    export default class Home extends wepy.page &#123;</span><br><span class="line">        // es6 class 内部，不是 json 不使用 : </span><br><span class="line">        data = &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>微信开发者工具<br>使用<code>微信开发者工具</code>–&gt;<code>添加项目</code>，项目目录请选择 <code>dist</code> 目录，即可根据配置（<code>project.config.json</code>）完成项目信息自动配置。</p></li><li><p>打开你就能看到你的小程序了</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>依赖管理<br>何为依赖管理？ 依赖管理说白了就是构建一个有向无环图。项目A依赖项目B，项目B依赖项目C，那么当你的项目依赖A的时候，依赖管理工具会自动让你的项目依赖B和C。 要想构建有向无环图，最关键的是要将项目转化为有向无环图中的结点。所以对于项目往往有description，作者信息，版本信息等额外信息。 </li><li>全局样式<br><code>app.wpy</code> 文件中 <code>&lt;style&gt;&lt;/style&gt;</code> 存放全局样式，我们通常在这里引入公共样式、基础样式等</li><li>组件 component 化开发</li></ul><ol><li>在 component 文件夹内定义组件<br>export default class Card extends wepy.component<br>意思是说：基于wepy.component 类新生出一个组件类，将此组件以模块的方式向外输出</li><li>页面引入组件，至此，页面开发不叫页面开发，而是组件开发，<br>页面由组件构成，将页面分为几个组件<br>就如飞机，全世界都在生产，组装在美国</li><li>在页面的 script component 区域内 声明一下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">component = &#123;</span><br><span class="line">组件名card: 类名Card,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>组件式开发将类以 html 标签的形式在页面上显示</p><ol start="4"><li>除了小程序 的页面组件之外，我们可以定制，可以使用社区的组件，可以从 github…</li></ol>]]></content>
      
      
        <tags>
            
            <tag> wepy </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序解析html标签wxPrase插件</title>
      <link href="/2018/05/21/wxPrase/"/>
      <url>/2018/05/21/wxPrase/</url>
      <content type="html"><![CDATA[<h1 id="小程序解析html标签wxPrase插件"><a href="#小程序解析html标签wxPrase插件" class="headerlink" title="小程序解析html标签wxPrase插件"></a>小程序解析html标签wxPrase插件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常我们在开发小程序（从列表页跳转到详情页）通过富文本编辑器返回的数据一般都是html的标签，但是偏偏微信小程序本身是不支持HTML标签的，所以我们在解析内容的时候就需要将内容中的HTML标签转换成微信小程序所支持的标签。那么有没有这样一个东西能够将 html 解析为 小程序能够识别的标签呢，<a href="https://github.com/icindy/wxParse" target="_blank" rel="noopener">wxPrase插件</a>就是这样一款插件</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><p>导入下载好的wxPrase文件在项目中（直接复制便是）；</p></li><li><p>在相应的详情<code>XXX.wxml</code> 文件中引入<code>wxParse.wxml</code> (引入文件最好放在第一行)；</p><p>例如：<code>&lt;import src=&quot;../../wxParse/wxParse.wxml&quot;/&gt;</code> </p></li><li><p>在相应的详情<code>XXX.wxss</code>文件中引入<code>wxParse.wxss</code> (引入文件最好放在第一行)；</p><p>例如：<code>@import &quot;../../wxParse/wxParse.wxss&quot;;</code></p></li><li><p>在相应的详情XXX.js里的onLoad()方法里面写上：<br><code>WxParse.wxParse(&#39;content&#39;, &#39;html&#39;, content, that, 0)</code><br> content：第一个参数表示绑定的数据<strong>（必填）</strong>；<br> html：第二个参数被转换的是html<strong>（必填）</strong>;<br> content:请求回来的数据<strong>（必填）</strong>；<br> that:一般为this，指的就是js里的page对象，如果没有var that=this,这是一个必填项就是this<strong>（必填）</strong>;<br> 0:最后一个参数为imagePadding为当图片自适应是左右的单一padding<strong>(默认为0,可选)</strong></p></li></ol><p>##<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WxParse HtmlFormater 用来解析 content 文本为小程序视图</span></span><br><span class="line"><span class="keyword">import</span> WxParse <span class="keyword">from</span> ../../lib/wxParse/wxParse;</span><br><span class="line"><span class="comment">// 把 html 转为化标准安全的格式</span></span><br><span class="line"><span class="keyword">import</span> HtmlFormater <span class="keyword">from</span> ../../lib/htmlFormater;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>es6 解构</title>
      <link href="/2018/05/21/es6-destructuring/"/>
      <url>/2018/05/21/es6-destructuring/</url>
      <content type="html"><![CDATA[<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><ul><li><p>对象字面量的语法形式是在一个赋值操作符左边放置一个对象字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    type: <span class="string">"Identifier"</span>,</span><br><span class="line">    name: <span class="string">"foo"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; type, name &#125; = node</span><br><span class="line"><span class="built_in">console</span>.log(type) <span class="comment">// "Identifier"</span></span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// "foo"</span></span><br></pre></td></tr></table></figure></li><li><p>如果已经存在type、name，重新赋值 使用解构的话则需要在表达式两侧加小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">  type: <span class="string">'Identifier'</span>,</span><br><span class="line">  name: <span class="string">'angela'</span></span><br><span class="line">&#125;,</span><br><span class="line">  type = <span class="string">'demo'</span>,</span><br><span class="line">  name = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//添加小括号可以将块语句转化为一个表达式，从而实现整个解构赋值的过程</span></span><br><span class="line">(&#123; type, name &#125; = node)</span><br></pre></td></tr></table></figure></li><li><p>如果指定的局部变量名称在对象中不存在，那么这个局部变量会被赋值为<code>undefined</code>，也可以自己设置一个默认值     </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    type: <span class="string">"Identifier"</span>,</span><br><span class="line">    name: <span class="string">"foo"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; type, name, value = <span class="literal">true</span> &#125; = node;</span><br><span class="line"><span class="built_in">console</span>.log(type); <span class="comment">// "Identifier"</span></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "foo"</span></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>嵌套对象解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    type: <span class="string">"Identifier"</span>,</span><br><span class="line">    name: <span class="string">"foo"</span>,</span><br><span class="line">    loc: &#123;</span><br><span class="line">        start: &#123;</span><br><span class="line">            line: <span class="number">1</span>,</span><br><span class="line">            column: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">    end: &#123;</span><br><span class="line">        line: <span class="number">1</span>,</span><br><span class="line">        column: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">loc</span>: &#123; start &#125;&#125; = node;</span><br><span class="line"><span class="built_in">console</span>.log(start.line); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(start.column); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><p>先来看几个简单明了的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line"><span class="keyword">let</span> [, , thirdColor] = colors</span><br><span class="line"><span class="built_in">console</span>.log(thirdColor)         <span class="comment">// blue</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>],</span><br><span class="line">  firstColor = <span class="string">'black'</span>,</span><br><span class="line">  secondColor = <span class="string">'purple'</span>;</span><br><span class="line">[firstColor, secondColor] = colors</span><br><span class="line"><span class="built_in">console</span>.log(firstColor, secondColor)    <span class="comment">// red green</span></span><br></pre></td></tr></table></figure><ul><li>变量交换<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统做法</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">　　b = <span class="number">2</span>,</span><br><span class="line">　　tmp;</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用解构赋值</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"><span class="built_in">console</span>.log(a, b)  <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure><ul><li><p>数组解构中有一个不定元素的概念，可以通过…语法将数组中的其余元素赋值给一个特定的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">let</span> [firstColor, ...restColors] = colors<span class="comment">//restColors包含两个元素green和blue</span></span><br></pre></td></tr></table></figure></li><li><p>最好的办法是既使用默认值，又使用解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULT_REQUEST_OPTIONS = &#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    header: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;url, data, header, method, dataType, mock=<span class="literal">false</span>&#125; = options</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Object.assign()</title>
      <link href="/2018/05/20/es6-assign()/"/>
      <url>/2018/05/20/es6-assign()/</url>
      <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, ...sources)</span><br></pre></td></tr></table></figure><h2 id="Object-assign-方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。"><a href="#Object-assign-方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。" class="headerlink" title="Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。"></a><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</h2><blockquote><p>拷贝一份 assign 用于(指向)生成新对象.可以用来合并对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 注意目标对象自身也会改变。</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">// 合并具有相同属性的对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="针对深拷贝，需要使用其他方法"><a href="#针对深拷贝，需要使用其他方法" class="headerlink" title="针对深拷贝，需要使用其他方法"></a>针对深拷贝，需要使用其他方法</h2><blockquote><p>因为 Object.assign()拷贝的是属性值 , 继承属性和不可枚举属性是不能拷贝的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">const</span> c = &#123;<span class="attr">t</span>: <span class="number">1</span>, <span class="attr">p</span>: <span class="string">'gg'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> d = deepCopy(c);</span><br><span class="line">d.t = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// &#123;t: 1, p: 'gg'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// &#123;t: 3, p: 'gg'&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultOpt = &#123;</span><br><span class="line">    title: <span class="string">'hello'</span>, </span><br><span class="line">    name: <span class="string">'oo'</span>, </span><br><span class="line">    type: <span class="string">'line'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 原来可能需要这样</span></span><br><span class="line"><span class="keyword">const</span> opt1 = deepCopy(a);</span><br><span class="line">opt1.title = <span class="string">'opt1'</span>;</span><br><span class="line">opt1.type = <span class="string">'bar'</span>;</span><br><span class="line">opt1.extra = <span class="string">'extra'</span>; <span class="comment">// 额外增加配置</span></span><br><span class="line"><span class="comment">// 现在只要这样</span></span><br><span class="line"><span class="keyword">const</span> opt2 = <span class="built_in">Object</span>.assign(&#123;&#125;, a, &#123;</span><br><span class="line">    title: <span class="string">'opt2'</span>, </span><br><span class="line">    type: <span class="string">'bar'</span>, </span><br><span class="line">    extra: <span class="string">'extra'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/05/16/ques-1px/"/>
      <url>/2018/05/16/ques-1px/</url>
      <content type="html"><![CDATA[<h1 id="移动-Web-1像素-问题"><a href="#移动-Web-1像素-问题" class="headerlink" title="移动 Web 1像素 问题"></a>移动 Web 1像素 问题</h1><p>问题：一般在移动端，由于dpr（设备像素比）不为1，在PC端显示1像素的边框，在移动端其实显示为2px。<br>解决这个问题，主要思想是：<strong>使用伪元素设置1px的边框，然后使用 transform:scale，对边框进行缩放（scaleY）。</strong><br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上边框</span></span><br><span class="line">:before</span><br><span class="line">    <span class="attribute">content</span> <span class="string">""</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">1px</span></span><br><span class="line">    <span class="attribute">border-top</span> <span class="number">1px</span> solid e5e5e5</span><br><span class="line">    <span class="attribute">color</span> <span class="number">#e5e5e5</span></span><br><span class="line">    -webkit-<span class="attribute">transform-origin</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">transform-origin</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    -webkit-<span class="attribute">transform</span> scaleY(<span class="number">0.5</span>)</span><br><span class="line">    <span class="attribute">transform</span> scaleY(<span class="number">0.5</span>)</span><br><span class="line">    <span class="attribute">z-index</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下边框 注意 transform-origin</span></span><br><span class="line">&amp;:after</span><br><span class="line">    <span class="attribute">content</span> <span class="string">""</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">1px</span></span><br><span class="line">    <span class="attribute">border-bottom</span> <span class="number">10px</span> solid <span class="number">#e5e5e5</span></span><br><span class="line">    <span class="attribute">color</span> <span class="number">#e5e5e5</span></span><br><span class="line">    -webkit-<span class="attribute">transform-origin</span> <span class="number">0</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">transform-origin</span> <span class="number">0</span> <span class="number">100%</span></span><br><span class="line">    -webkit-<span class="attribute">transform</span> scaleY(<span class="number">0.5</span>)</span><br><span class="line">    <span class="attribute">transform</span> scaleY(<span class="number">0.5</span>)</span><br><span class="line">    <span class="attribute">z-index</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>微信小程序学习(一)</title>
      <link href="/2018/05/16/wxapp/"/>
      <url>/2018/05/16/wxapp/</url>
      <content type="html"><![CDATA[<h1 id="微信小程序初探"><a href="#微信小程序初探" class="headerlink" title="微信小程序初探"></a>微信小程序初探</h1><p><strong>历史:</strong></p><blockquote><p>移动互联网时代 2010-2016<br>    85后的大佬 滴滴4年<br>    传统 APP：安装大小、流量安装、占手机内存、耗电  </p></blockquote><blockquote><p>2017 - 物联网 人工智能时代<br>    wxapp 微信赋能 微信关系链 不用安装 用完即走 小到 1m 以内 开发成本最低 html5/css3/es6 来开发<br>    现在：一些(10个以内)巨无霸 APP 流量入口 再装一堆小程序</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>下载并安装 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=2018515" target="_blank" rel="noopener">微信web开发者工具</a></li><li>申请一个小程序账号, 点击 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a> 根据指引填写信息和提交相应的资料, 就可以拥有自己的小程序帐号</li><li>登录<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>, 在菜单 “设置”-“开发设置” 看到小程序的 <strong>AppID</strong><blockquote><p>注意:小程序的 <strong>AppID</strong> 相当于小程序平台的一个身份证, 后续你会在很多地方要用到 <strong>AppID</strong></p></blockquote></li></ol><p>你也可以参考<a href="https://developers.weixin.qq.com/miniprogram/dev/index.html" target="_blank" rel="noopener">小程序官方简易教程</a></p><h2 id="第一个小程序"><a href="#第一个小程序" class="headerlink" title="第一个小程序"></a>第一个小程序</h2><p>打开<code>微信web开发者工具</code>, 用微信扫码登录开发者工具<br>新建项目选择<strong>小程序项目</strong>, 选择代码存放的硬盘路径, 填入刚刚申请到的小程序的 <strong>AppID</strong>, 给你的项目起一个好听的名字, 最后, 勾选 “创建 <strong>QuickStart</strong> 项目” ( <em>注意: 你要选择一个空的目录才会有这个选项</em> ), 点击确定, 你就得到了你的第一个小程序了</p><h2 id="小程序的目录结构"><a href="#小程序的目录结构" class="headerlink" title="小程序的目录结构"></a>小程序的目录结构</h2><p>开发者工具将会生成基本框架, 初始化并包含了一些简单的代码文件, 其中<code>app.js</code>、<code>app.json</code>、<code>app.wxss</code> 这三个是必不可少的, 小程序会读取这些文件初始化实例  </p><pre><code>/pages    /index        /index.js        /index.wxml        /index.wxss    /logs/utils    /util.js/app.js/app.json/app.wxss</code></pre><ul><li>index 文件夹：首页</li><li>logs 文件夹：日志(不必须)</li><li>utils 文件夹：公共的、通用的文件夹, utils.js 存放公用代码, 比如系统默认写入的日期转化函数</li><li>app.js: 逻辑文件</li><li>app.json: 配置文件, 有多少个 appy 页面都要在这注册, 还可以进行窗口样式配置</li><li>app.wxss: 公共的样式表文件</li></ul><blockquote><p>文件实质:<br>    wxml =&gt; html<br>    js =&gt; 逻辑<br>    wcss =&gt; css</p></blockquote><h2 id="开发者工具调试区介绍"><a href="#开发者工具调试区介绍" class="headerlink" title="开发者工具调试区介绍"></a>开发者工具调试区介绍</h2><ul><li>Console<br><code>Console</code>的意思是控制台, 做过开发的都知道几乎每个IDE都会有控制台, 可以显示错误信息和打印变量的信息等</li><li>Sources<br><code>Sources</code>显示了当前项目的所有脚本文件, 微信小程序框架会对这些脚本文件进行编译。<br><code>Source</code>下边还有一个区域, 做过软件开发的都知道, 一般下边是控制台会显示一些log信息、断电调试等等。</li><li>Network<br>有网络请求时, 显示与网络相关的信息</li><li>Storage<br>显示当前项目的使用 <code>wx.setStorage</code> 或者 <code>wx.setStorageSync</code> 进行本地存储后的数据存储情况</li><li>AppData<br>显示当前项目显示的具体数据, 比如事件对象等</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> wxapp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo&amp;NexT 博客个性化主题设置</title>
      <link href="/2018/05/03/hexo_config/"/>
      <url>/2018/05/03/hexo_config/</url>
      <content type="html"><![CDATA[<h1 id="Hexo-amp-NexT-博客骚操作-个性化主题设置"><a href="#Hexo-amp-NexT-博客骚操作-个性化主题设置" class="headerlink" title="Hexo&amp;NexT 博客骚操作-个性化主题设置"></a>Hexo&amp;NexT 博客骚操作-个性化主题设置</h1><blockquote><p>最简单的 hexo&amp;next 主题个性化设置 </p><blockquote><p>前提须知：<br>    <strong>站点配置文件</strong>: 根目录下的 <code>_config.yml</code><br>    <strong>主题配置文件</strong>: 主题文件夹内的 <code>_config.yml</code>  </p></blockquote></blockquote><h2 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h2><blockquote><p>推荐使用 Hexo 提供的 Local Search，通过安装 hexo-generator-search 插件，在本地生成一个 search.xml 文件，搜索的时候从这个文件中根据关键字检索出相应的链接  </p></blockquote><ul><li><h3 id="安装-hexo-generator-search-和-hexo-generator-searchdb"><a href="#安装-hexo-generator-search-和-hexo-generator-searchdb" class="headerlink" title="安装 hexo-generator-search 和 hexo-generator-searchdb"></a>安装 hexo-generator-search 和 hexo-generator-searchdb</h3><blockquote><p>站点根目录下命令行输入  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">```     </span><br><span class="line">```bash</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></blockquote></li><li><h3 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h3><blockquote><p>编辑 站点配置文件 <code>_config.yml</code> ，新增以下内容:</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></blockquote></li><li><h3 id="启用本地搜索功能"><a href="#启用本地搜索功能" class="headerlink" title="启用本地搜索功能"></a>启用本地搜索功能</h3><blockquote><p>打开主题配置文件 <code>_config.yml</code> ，设为 true    </p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="代码块自定义样式"><a href="#代码块自定义样式" class="headerlink" title="代码块自定义样式"></a>代码块自定义样式</h2><blockquote><p>打开\themes\next\source\css_custom\custom.styl<br>向里面加入：(颜色可以自己定义)<br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line">code</span><br><span class="line">    <span class="attribute">color</span> <span class="number">#ff7600</span></span><br><span class="line">    <span class="attribute">background</span> <span class="number">#fbf7f8</span></span><br><span class="line">    <span class="attribute">margin</span> <span class="number">2px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大代码块的自定义样式</span></span><br><span class="line"><span class="selector-class">.highlight</span>, pre</span><br><span class="line">    <span class="attribute">margin</span> <span class="number">5px</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">padding</span> <span class="number">5px</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">3px</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, pre</span><br><span class="line">    <span class="attribute">border</span> <span class="number">1px</span> solid <span class="number">#d6d6d6</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><blockquote><p>编辑站点配置文件, 新增字段 <code>avatar</code><br>头像的链接地址可以是:   </p></blockquote><ul><li><p><strong>网络地址</strong></p>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">avatar</span>: https://你的头像地址</span><br></pre></td></tr></table></figure></li><li><p><strong>站内地址</strong></p><blockquote><p>图片文件保存在 根目录 <code>/source/iamges</code> 中</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">./images/icon.jpg</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h2><blockquote><p>打开主题配置文件 <code>_config.yml</code>，找到 <code>#Menu Settings</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span>                       <span class="comment">#主页</span></span><br><span class="line"><span class="attr">  about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span>                <span class="comment">#关于</span></span><br><span class="line"><span class="attr">  tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span>                  <span class="comment">#标签</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span>        <span class="comment">#分页</span></span><br><span class="line"><span class="attr">  archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span>       <span class="comment">#归档</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>去掉 <code>#</code> 以显示需要的菜单项<br>若站点运行在子目录中, 将链接前缀的 / 去掉</p></blockquote><h2 id="点击出现桃心效果-或文字"><a href="#点击出现桃心效果-或文字" class="headerlink" title="点击出现桃心效果(或文字)"></a>点击出现桃心效果(或文字)</h2><ul><li><p>桃心效果<br>  <a href="http://7u2ss1.com1.z0.glb.clouddn.com/love.js" target="_blank" rel="noopener"><strong>点我获取 love.js 源码</strong></a>    </p><blockquote><p>在路径 <code>/themes/next/source/js/src</code> 下新建 <code>love.js</code> 文件，并将网址中的代码复制进去<br>  然后打开 <code>/themes/next/layout/_layout.swig</code> 文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：    </p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>文字效果  </p><blockquote><p>代码替换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">$(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span>, <span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY,</span><br><span class="line">        c = <span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">        <span class="string">"z-index"</span>: <span class="number">999</span>,</span><br><span class="line">        <span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line">        <span class="string">"left"</span>: x,</span><br><span class="line">        <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">        <span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line">        <span class="string">"font-size"</span>: <span class="string">"3em"</span>,</span><br><span class="line">        <span class="string">"color"</span>: c</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"body"</span>).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">        <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">        <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">1500</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="自定义添加-js"><a href="#自定义添加-js" class="headerlink" title="自定义添加 js"></a>自定义添加 js</h2><p><code>/themes/next/source/js/src</code> 路径下建立 js 文件<br><code>/themes/next/layout/_layout.swig</code> 下引入</p><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p><code>themes/next/source/css/custom/_custom.styl</code>    </p><h2 id="文章阅读次数"><a href="#文章阅读次数" class="headerlink" title="文章阅读次数"></a>文章阅读次数</h2><ol><li>创建<code>LeanCloud</code>账号，进入 <a href="https://leancloud.cn" target="_blank" rel="noopener"><strong>LeanCloud官网</strong></a><br> 并注册</li><li>进入访问控制台</li><li>单击“创建应用”按钮进行应用的创建，输入新应用名称，选择开发版，单击“创建”按钮完成创建 </li><li>创建<code>Class</code>进入到刚刚创建的应用中，选择左侧导航栏的<code>“存储”</code>，然后点击<code>“创建Class”</code>，为了与<code>Next</code>形成配置关系，将<code>Class</code>名称填为<code>Counter</code>，并选择 第一项 <code>限制写入</code> <code>限制写入</code> <code>限制写入</code>，重要的事情说三次，然后单击<code>“创建Class”</code>按钮完成<code>Class</code>的创建</li><li>配置<code>Key</code><br>在左侧导航栏的设置界面，单击<code>“应用Key”</code>可以看到应用的<code>App ID</code>和<code>App Key</code></li><li>复制<code>ID</code>和<code>Key</code>，然后将其配置到主题配置文件中，在文件中找到<code>leancloud_visitors</code>属性，将<code>enable</code>设置为<code>true</code>，然后将之前复制的<code>ID</code>和<code>Key</code>粘贴到相应的属性中<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">HCmcHOKGNq马赛克BTx7MtHpj-gzGzoHsz</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">Lo4pIArbo马赛克liHjN6UMsk</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p><code>NexT</code>主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件<code>(Blog\themes\next_config.yml)</code>中打开<code>wordcount</code> 统计功能即可<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>找到<code>Blog\themes\next\layout\_macro\post.swig</code> 文件,<br>将下面代码后面加 <code>“字”</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">     &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h2 id="tags-标签创建与样式修改"><a href="#tags-标签创建与样式修改" class="headerlink" title="tags 标签创建与样式修改"></a>tags 标签创建与样式修改</h2><h3 id="创建-tags"><a href="#创建-tags" class="headerlink" title="创建 tags"></a>创建 tags</h3><p>命令行输入<code>hexo new page &quot;tags&quot;</code></p><blockquote><p>在myBlog/source下会新生成一个新的文件夹tags<br>，在该文件夹下会有一个index.md文件</p></blockquote><h3 id="编辑-tags-文件夹下的-index-md"><a href="#编辑-tags-文件夹下的-index-md" class="headerlink" title="编辑 tags 文件夹下的 index.md"></a>编辑 tags 文件夹下的 index.md</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-07-10 16:36:26</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="编辑主题的-themes-next-config-yml-，添加tags-到-menu-中"><a href="#编辑主题的-themes-next-config-yml-，添加tags-到-menu-中" class="headerlink" title="编辑主题的 themes/next/_config.yml ，添加tags 到 menu 中"></a>编辑主题的 <code>themes/next/_config.yml</code> ，添加tags 到 menu 中</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags/</span></span><br></pre></td></tr></table></figure><h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3><p>路径<code>themes\next\source\css\_common\components\post\post-tags.styl</code><br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> .post-tags</span><br><span class="line">  <span class="attribute">margin-top</span> <span class="number">40px</span></span><br><span class="line">  <span class="attribute">text-align</span> center</span><br><span class="line"></span><br><span class="line">  a</span><br><span class="line">    <span class="attribute">display</span> inline-block</span><br><span class="line">    <span class="attribute">margin-right</span> <span class="number">10px</span></span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">13px</span></span><br><span class="line">    <span class="attribute">border</span> <span class="number">1px</span> solid <span class="number">#ccc</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">5px</span> </span><br><span class="line">    <span class="attribute">color</span> <span class="number">#0593d3</span></span><br></pre></td></tr></table></figure></p><h3 id="添加-“文章标签”-字样"><a href="#添加-“文章标签”-字样" class="headerlink" title="添加 “文章标签” 字样"></a>添加 “文章标签” 字样</h3><p>路径 <code>themes\next\layout\_macro\post.swig</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">  &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">    &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">    文章标签: </span><br><span class="line">      &#123;% for tag in post.tags %&#125;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
            <tag> 博客 </tag>
            
            <tag> 自定义 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript 语言精粹学习笔记</title>
      <link href="/2018/05/01/note/"/>
      <url>/2018/05/01/note/</url>
      <content type="html"><![CDATA[<h1 id="函数-Functions"><a href="#函数-Functions" class="headerlink" title="函数 (Functions)"></a>函数 (Functions)</h1><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p><code>JavaScript</code> 中的函数就是对象，函数可以保存在变量、对象和数组中，可以被当做参数传递给其他函数，函数也可以再返回函数，函数可以拥有方法</p><h2 id="通过字面量创建函数"><a href="#通过字面量创建函数" class="headerlink" title="通过字面量创建函数"></a>通过字面量创建函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>函数调用会暂停当前函数的执行，传递控制权和参数给新函数</p><p>除了声明时定义的形参，每个函数接收两个附加的参数 <code>this</code> 和 <code>arguments</code></p><p>当实参和形参个数不匹配时，不会导致运行错误，实参过多则忽略超出的参数，实参不足则缺失的参数默认为 <code>undefined</code>，而且对参数不会进行类型检查。</p><p><strong>JavaScript 中有四种调用模式：</strong></p><ul><li><h3 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h3></li></ul><p>当函数被保存为对象的一个属性时，称之为方法。<br>    如果调用表达式包含一个提取属性的动作：：<code>.</code>表达式或<code>[]</code>下标表达式，就是被当做方法调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">obj.show();</span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>this</code> 可以取得上下文方法称为公共方法</p></blockquote><ul><li><h3 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h3></li></ul><p>当一个函数并非一个对象属性时，就是被当做一个函数来调用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    value: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">myObject.double = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)         <span class="comment">// undefined</span></span><br><span class="line">        <span class="built_in">console</span>.log(that.value)         <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    helper();<span class="comment">// 以函数的形式调用</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">myObject.double()<span class="comment">// 以方法的形式调用</span></span><br></pre></td></tr></table></figure><p>以此模式调用函数时，<code>this</code> 将会绑定到全局对象，而内部函数的 <code>this</code> 无法绑定外部函数 的<code>this</code> 变量，所以不能共享访问权。</p><blockquote><p>解决办法：外部定义一个 <code>that</code> 变量保存 <code>this</code> 的值，内部函数通过 <code>that</code> 访问。</p></blockquote><ul><li><h3 id="构造器调用模式"><a href="#构造器调用模式" class="headerlink" title="构造器调用模式"></a>构造器调用模式</h3></li></ul><p>如果一个类需要通过 <code>new</code> 关键字调用，那就是构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Func = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myFunc = <span class="keyword">new</span> Func(<span class="string">'construct'</span>);</span><br></pre></td></tr></table></figure><ul><li><h3 id="apply-调用模式"><a href="#apply-调用模式" class="headerlink" title="apply 调用模式"></a>apply 调用模式</h3></li></ul><p><code>apply</code> 方法需要构建一个参数数组传递给调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> sum = add.apply(arr, [<span class="number">3</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h2 id="返回-Return"><a href="#返回-Return" class="headerlink" title="返回 Return"></a>返回 Return</h2><p>一个函数总会返回一个值，如果没有指定返回值，则返回 <code>undefined</code>。</p><blockquote><p><code>return;</code> 可用来使函数提前返回</p></blockquote><h2 id="异常-Exceptions"><a href="#异常-Exceptions" class="headerlink" title="异常 Exceptions"></a>异常 Exceptions</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">'TypeError'</span>,</span><br><span class="line">            message: <span class="string">'a need to be number'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    add(<span class="string">'a'</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)<span class="comment">// &#123;name: 'TypeError',message: 'a need to be number'&#125;</span></span><br><span class="line">    <span class="comment">// console.log(error.name + error.message)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩充类型的功能"><a href="#扩充类型的功能" class="headerlink" title="扩充类型的功能"></a>扩充类型的功能</h2><p>  通过给 <code>Object.prototype</code> 添加方法，可以让该方法对所有对象都可用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prototype[name] = func;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 去除首位空格</span></span><br><span class="line"><span class="built_in">String</span>.method(<span class="string">'trim'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"  neat  "</span>.trim());<span class="comment">// neat</span></span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>  函数自己调用自己，称为函数的递归调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 自己调用自己，称为递归调用</span></span><br><span class="line">    fun();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure><h2 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域 Scope"></a>作用域 Scope</h2><p>作用域控制着变量与参数的可以性及声明周期。</p><p>减少了名称冲突，并且提供了自动内存管理。</p><p>函数内部可以直接读取全局变量，函数外部无法读取函数内部的局部变量    </p><p>但实际上 <code>JavaScript</code> 语法并<strong>不支持块级作用域</strong>，函数中的参数和变量在外部不可见，在内部可见</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">4</span>, b = <span class="number">6</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'a '</span> + a + <span class="string">', b '</span> + b);<span class="comment">// a = 4, b = 6</span></span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a '</span> + a + <span class="string">', b '</span> + b);<span class="comment">// a = 3, b = 5</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h2 id="闭包-Closure"><a href="#闭包-Closure" class="headerlink" title="闭包 Closure"></a>闭包 Closure</h2><p>闭包就是能够读取其他函数内部变量的函数</p><p>由于在 <code>Javascript</code> 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 <strong>“定义在一个函数内部的函数”</strong>。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>  作用：</p><ul><li><strong>可以读取函数内部的变量</strong></li><li><strong>让这些变量的值始终保持在内存中</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    nAdd = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = f1();</span><br><span class="line"></span><br><span class="line">result(); <span class="comment">// 999</span></span><br><span class="line"></span><br><span class="line">nAdd();</span><br><span class="line"></span><br><span class="line">result(); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><p><strong>匿名函数本身就是闭包</strong></p><h2 id="回调-Callback"><a href="#回调-Callback" class="headerlink" title="回调 Callback"></a>回调 Callback</h2><p><strong>回调函数原理</strong>：“我现在出发，到了通知你”。<br>这是一个异步的流程，“我出发”这个过程中（函数执行），“你” 可以去做任何事，“到了”（函数执行完毕）“通知你”（回调）进行之后的流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    callback(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberAdd</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(a+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething(numberAdd);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块 Module"></a>模块 Module</h2><p>  模块是一个提供接口却隐藏状态与实现的函数或对象。</p>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/04/19/hello-world/"/>
      <url>/2018/04/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
